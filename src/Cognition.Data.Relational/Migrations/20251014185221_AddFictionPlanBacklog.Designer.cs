// <auto-generated />
using System;
using System.Collections.Generic;
using Cognition.Data.Relational;
using Cognition.Data.Relational.Modules.Planning;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cognition.Data.Relational.Migrations
{
    [DbContext(typeof(CognitionDbContext))]
    [Migration("20251014185221_AddFictionPlanBacklog")]
    partial class AddFictionPlanBacklog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Agents.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_profile_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<bool>("RolePlay")
                        .HasColumnType("boolean")
                        .HasColumnName("role_play");

                    b.Property<Dictionary<string, object>>("State")
                        .HasColumnType("jsonb")
                        .HasColumnName("state");

                    b.Property<string>("Suffix")
                        .HasColumnType("text")
                        .HasColumnName("suffix");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_agents");

                    b.HasIndex("ClientProfileId");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("agents", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Agents.AgentToolBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("Config")
                        .HasColumnType("jsonb")
                        .HasColumnName("config");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uuid")
                        .HasColumnName("scope_id");

                    b.Property<string>("ScopeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scope_type");

                    b.Property<Guid>("ToolId")
                        .HasColumnType("uuid")
                        .HasColumnName("tool_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_agent_tool_bindings");

                    b.HasIndex("AgentId");

                    b.HasIndex("ToolId");

                    b.HasIndex("ScopeType", "ScopeId", "ToolId")
                        .IsUnique()
                        .HasDatabaseName("ux_agent_tool_bindings_scope_tool");

                    b.ToTable("agent_tool_bindings", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Config.DataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("collection_name");

                    b.Property<Dictionary<string, object>>("Config")
                        .HasColumnType("jsonb")
                        .HasColumnName("config");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("DataSourceType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_source_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_data_sources");

                    b.HasIndex("Name", "DataSourceType")
                        .IsUnique()
                        .HasDatabaseName("ux_data_sources_name_type");

                    b.ToTable("data_sources", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Config.SystemVariable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("key");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<Dictionary<string, object>>("Value")
                        .HasColumnType("jsonb")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_system_variables");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ux_system_variables_key");

                    b.ToTable("system_variables", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("agent_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_conversations");

                    b.HasIndex("AgentId");

                    b.ToTable("conversations", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ActiveVersionIndex")
                        .HasColumnType("integer")
                        .HasColumnName("active_version_index");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<Guid>("FromAgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_agent_id");

                    b.Property<Guid>("FromPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_persona_id");

                    b.Property<string>("Metatype")
                        .HasColumnType("text")
                        .HasColumnName("metatype");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<Guid?>("ToPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_persona_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_conversation_messages");

                    b.HasIndex("FromAgentId");

                    b.HasIndex("FromPersonaId");

                    b.HasIndex("ToPersonaId");

                    b.HasIndex("ConversationId", "Timestamp")
                        .HasDatabaseName("ix_conversation_messages_conversation_ts");

                    b.ToTable("conversation_messages", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationMessageVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("ConversationMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_message_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VersionIndex")
                        .HasColumnType("integer")
                        .HasColumnName("version_index");

                    b.HasKey("Id")
                        .HasName("pk_conversation_message_versions");

                    b.HasIndex("ConversationMessageId", "VersionIndex")
                        .IsUnique()
                        .HasDatabaseName("ux_conversation_message_versions_message_index");

                    b.ToTable("conversation_message_versions", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("JoinedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at_utc");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_conversation_participants");

                    b.HasIndex("PersonaId");

                    b.HasIndex("ConversationId", "PersonaId")
                        .HasDatabaseName("ix_conversation_participants_conversation_persona");

                    b.ToTable("conversation_participants", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("OutlineJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("outline_json");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_conversation_plans");

                    b.HasIndex("ConversationId");

                    b.HasIndex("PersonaId");

                    b.ToTable("conversation_plans", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ByPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("by_persona_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("ReferencesPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("references_persona_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_conversation_summaries");

                    b.HasIndex("ByPersonaId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ReferencesPersonaId");

                    b.ToTable("conversation_summaries", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ArgsJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("args_json");

                    b.Property<Guid>("ConversationPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_plan_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<string>("FinalAnswer")
                        .HasColumnType("text")
                        .HasColumnName("final_answer");

                    b.Property<bool>("Finish")
                        .HasColumnType("boolean")
                        .HasColumnName("finish");

                    b.Property<string>("Goal")
                        .HasColumnType("text")
                        .HasColumnName("goal");

                    b.Property<string>("Observation")
                        .HasColumnType("text")
                        .HasColumnName("observation");

                    b.Property<string>("Rationale")
                        .HasColumnType("text")
                        .HasColumnName("rationale");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer")
                        .HasColumnName("step_number");

                    b.Property<string>("Thought")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thought");

                    b.Property<Guid?>("ToolId")
                        .HasColumnType("uuid")
                        .HasColumnName("tool_id");

                    b.Property<string>("ToolName")
                        .HasColumnType("text")
                        .HasColumnName("tool_name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_conversation_tasks");

                    b.HasIndex("ConversationPlanId");

                    b.ToTable("conversation_tasks", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationThought", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentThoughtId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_thought_id");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<string>("PlanSnapshotJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("plan_snapshot_json");

                    b.Property<string>("Prompt")
                        .HasColumnType("text")
                        .HasColumnName("prompt");

                    b.Property<string>("Rationale")
                        .HasColumnType("text")
                        .HasColumnName("rationale");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer")
                        .HasColumnName("step_number");

                    b.Property<string>("Thought")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thought");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_conversation_thoughts");

                    b.HasIndex("ConversationId");

                    b.HasIndex("PersonaId");

                    b.ToTable("conversation_thoughts", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationWorkflowState", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Blackboard")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Pointer")
                        .HasColumnType("integer");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ConversationId");

                    b.ToTable("conversation_workflow_states");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.WorkflowEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("workflow_events");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.FeatureFlags.FeatureFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_enabled");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("key");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_feature_flags");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ux_feature_flags_key");

                    b.ToTable("feature_flags", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterBlueprint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_id");

                    b.Property<int>("ChapterIndex")
                        .HasColumnType("integer")
                        .HasColumnName("chapter_index");

                    b.Property<string>("ChapterSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chapter_slug");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("FictionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_plan_id");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<Guid?>("SourcePlanPassId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_plan_pass_id");

                    b.Property<Dictionary<string, object>>("Structure")
                        .HasColumnType("jsonb")
                        .HasColumnName("structure");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("synopsis");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_chapter_blueprints");

                    b.HasIndex("SourcePlanPassId");

                    b.HasIndex("FictionPlanId", "ChapterIndex")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_chapter_blueprints_plan_index");

                    b.HasIndex("FictionPlanId", "ChapterSlug")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_chapter_blueprints_plan_slug");

                    b.ToTable("fiction_chapter_blueprints", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterScene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("DerivedFromSceneId")
                        .HasColumnType("uuid")
                        .HasColumnName("derived_from_scene_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FictionChapterSectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_chapter_section_id");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<int>("SceneIndex")
                        .HasColumnType("integer")
                        .HasColumnName("scene_index");

                    b.Property<string>("SceneSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scene_slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_chapter_scenes");

                    b.HasIndex("DerivedFromSceneId");

                    b.HasIndex("FictionChapterSectionId", "SceneIndex")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_chapter_scenes_section_index");

                    b.ToTable("fiction_chapter_scenes", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterScroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("DerivedFromScrollId")
                        .HasColumnType("uuid")
                        .HasColumnName("derived_from_scroll_id");

                    b.Property<Guid>("FictionChapterBlueprintId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_chapter_blueprint_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("ScrollSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scroll_slug");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("synopsis");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<int>("VersionIndex")
                        .HasColumnType("integer")
                        .HasColumnName("version_index");

                    b.HasKey("Id")
                        .HasName("pk_fiction_chapter_scrolls");

                    b.HasIndex("DerivedFromScrollId");

                    b.HasIndex("FictionChapterBlueprintId", "VersionIndex")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_chapter_scrolls_blueprint_index");

                    b.ToTable("fiction_chapter_scrolls", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FictionChapterScrollId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_chapter_scroll_id");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<Guid?>("ParentSectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_section_id");

                    b.Property<int>("SectionIndex")
                        .HasColumnType("integer")
                        .HasColumnName("section_index");

                    b.Property<string>("SectionSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("section_slug");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_chapter_sections");

                    b.HasIndex("ParentSectionId");

                    b.HasIndex("FictionChapterScrollId", "SectionIndex")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_chapter_sections_scroll_index");

                    b.ToTable("fiction_chapter_sections", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FictionProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_project_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PrimaryBranchSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primary_branch_slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_plans");

                    b.HasIndex("FictionProjectId", "Name")
                        .HasDatabaseName("ix_fiction_plans_project_name");

                    b.ToTable("fiction_plans", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlanBacklogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BacklogId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("backlog_id");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at_utc");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<Guid>("FictionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_plan_id");

                    b.Property<DateTime?>("InProgressAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("in_progress_at_utc");

                    b.PrimitiveCollection<string[]>("Inputs")
                        .HasColumnType("jsonb")
                        .HasColumnName("inputs");

                    b.PrimitiveCollection<string[]>("Outputs")
                        .HasColumnType("jsonb")
                        .HasColumnName("outputs");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_plan_backlog");

                    b.HasIndex("FictionPlanId", "BacklogId")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_plan_backlog_plan_backlog_id");

                    b.ToTable("fiction_plan_backlog", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlanCheckpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("CompletedCount")
                        .HasColumnType("integer")
                        .HasColumnName("completed_count");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("FictionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_plan_id");

                    b.Property<DateTime?>("LockedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_at_utc");

                    b.Property<Guid?>("LockedByAgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("locked_by_agent_id");

                    b.Property<Guid?>("LockedByConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("locked_by_conversation_id");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phase");

                    b.Property<Dictionary<string, object>>("Progress")
                        .HasColumnType("jsonb")
                        .HasColumnName("progress");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int?>("TargetCount")
                        .HasColumnType("integer")
                        .HasColumnName("target_count");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_plan_checkpoints");

                    b.HasIndex("FictionPlanId", "Phase")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_plan_checkpoints_plan_phase");

                    b.ToTable("fiction_plan_checkpoints", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlanPass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid>("FictionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_plan_id");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<int>("PassIndex")
                        .HasColumnType("integer")
                        .HasColumnName("pass_index");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_plan_passes");

                    b.HasIndex("FictionPlanId", "PassIndex")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_plan_passes_plan_index");

                    b.ToTable("fiction_plan_passes", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlanTranscript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("agent_id");

                    b.Property<int>("Attempt")
                        .HasColumnType("integer")
                        .HasColumnName("attempt");

                    b.Property<int?>("CompletionTokens")
                        .HasColumnType("integer")
                        .HasColumnName("completion_tokens");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<Guid?>("ConversationMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_message_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("FictionChapterBlueprintId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_chapter_blueprint_id");

                    b.Property<Guid?>("FictionChapterSceneId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_chapter_scene_id");

                    b.Property<Guid>("FictionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_plan_id");

                    b.Property<bool>("IsRetry")
                        .HasColumnType("boolean")
                        .HasColumnName("is_retry");

                    b.Property<double?>("LatencyMs")
                        .HasColumnType("double precision")
                        .HasColumnName("latency_ms");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phase");

                    b.Property<int?>("PromptTokens")
                        .HasColumnType("integer")
                        .HasColumnName("prompt_tokens");

                    b.Property<string>("RequestPayload")
                        .HasColumnType("text")
                        .HasColumnName("request_payload");

                    b.Property<string>("ResponsePayload")
                        .HasColumnType("text")
                        .HasColumnName("response_payload");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("ValidationDetails")
                        .HasColumnType("text")
                        .HasColumnName("validation_details");

                    b.Property<string>("ValidationStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("validation_status");

                    b.HasKey("Id")
                        .HasName("pk_fiction_plan_transcripts");

                    b.HasIndex("FictionChapterBlueprintId");

                    b.HasIndex("FictionChapterSceneId");

                    b.HasIndex("FictionPlanId", "CreatedAtUtc")
                        .HasDatabaseName("ix_fiction_plan_transcripts_plan_created_at");

                    b.ToTable("fiction_plan_transcripts", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Logline")
                        .HasColumnType("text")
                        .HasColumnName("logline");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_projects");

                    b.ToTable("fiction_projects", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionStoryMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Dictionary<string, object>>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<Guid?>("FictionChapterSceneId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_chapter_scene_id");

                    b.Property<Guid>("FictionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_plan_id");

                    b.Property<string>("MetricKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metric_key");

                    b.Property<double?>("NumericValue")
                        .HasColumnType("double precision")
                        .HasColumnName("numeric_value");

                    b.Property<string>("TextValue")
                        .HasColumnType("text")
                        .HasColumnName("text_value");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_story_metrics");

                    b.HasIndex("FictionChapterSceneId");

                    b.HasIndex("FictionPlanId", "MetricKey", "CreatedAtUtc")
                        .HasDatabaseName("ix_fiction_story_metrics_plan_key_created_at");

                    b.ToTable("fiction_story_metrics", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionWorldBible", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BranchSlug")
                        .HasColumnType("text")
                        .HasColumnName("branch_slug");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<Guid>("FictionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_plan_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_fiction_world_bibles");

                    b.HasIndex("FictionPlanId", "Domain", "BranchSlug")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_world_bibles_domain_branch");

                    b.ToTable("fiction_world_bibles", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionWorldBibleEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("change_type");

                    b.Property<Dictionary<string, object>>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("DerivedFromEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("derived_from_entry_id");

                    b.Property<string>("EntryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entry_name");

                    b.Property<string>("EntrySlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entry_slug");

                    b.Property<Guid?>("FictionChapterSceneId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_chapter_scene_id");

                    b.Property<Guid?>("FictionChapterScrollId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_chapter_scroll_id");

                    b.Property<Guid>("FictionWorldBibleId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiction_world_bible_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_fiction_world_bible_entries");

                    b.HasIndex("DerivedFromEntryId");

                    b.HasIndex("FictionChapterSceneId");

                    b.HasIndex("FictionChapterScrollId");

                    b.HasIndex("FictionWorldBibleId", "EntrySlug", "Version")
                        .IsUnique()
                        .HasDatabaseName("ux_fiction_world_bible_entries_slug_version");

                    b.ToTable("fiction_world_bible_entries", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Images.ImageAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("bytes");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("CreatedByPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_persona_id");

                    b.Property<float>("Guidance")
                        .HasColumnType("real")
                        .HasColumnName("guidance");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("NegativePrompt")
                        .HasColumnType("text")
                        .HasColumnName("negative_prompt");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prompt");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<int?>("Seed")
                        .HasColumnType("integer")
                        .HasColumnName("seed");

                    b.Property<string>("Sha256")
                        .HasColumnType("text")
                        .HasColumnName("sha256");

                    b.Property<int>("Steps")
                        .HasColumnType("integer")
                        .HasColumnName("steps");

                    b.Property<Guid?>("StyleId")
                        .HasColumnType("uuid")
                        .HasColumnName("style_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_image_assets");

                    b.HasIndex("CreatedByPersonaId");

                    b.HasIndex("Sha256")
                        .HasDatabaseName("ix_image_assets_sha256");

                    b.HasIndex("StyleId");

                    b.HasIndex("ConversationId", "CreatedAtUtc")
                        .HasDatabaseName("ix_image_assets_conversation_time");

                    b.ToTable("image_assets", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Images.ImageStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Dictionary<string, object>>("Defaults")
                        .HasColumnType("jsonb")
                        .HasColumnName("defaults");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("NegativePrompt")
                        .HasColumnType("text")
                        .HasColumnName("negative_prompt");

                    b.Property<string>("PromptPrefix")
                        .HasColumnType("text")
                        .HasColumnName("prompt_prefix");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_image_styles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ux_image_styles_name");

                    b.ToTable("image_styles", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Instructions.Instruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<bool>("RolePlay")
                        .HasColumnType("boolean")
                        .HasColumnName("role_play");

                    b.PrimitiveCollection<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_instructions");

                    b.ToTable("instructions", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Instructions.InstructionSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Scope")
                        .HasColumnType("text")
                        .HasColumnName("scope");

                    b.Property<Guid?>("ScopeRefId")
                        .HasColumnType("uuid")
                        .HasColumnName("scope_ref_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_instruction_sets");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_instruction_sets_name");

                    b.ToTable("instruction_sets", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Instructions.InstructionSetItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<Guid>("InstructionId")
                        .HasColumnType("uuid")
                        .HasColumnName("instruction_id");

                    b.Property<Guid>("InstructionSetId")
                        .HasColumnType("uuid")
                        .HasColumnName("instruction_set_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_instruction_set_items");

                    b.HasIndex("InstructionId");

                    b.HasIndex("InstructionSetId", "Order")
                        .HasDatabaseName("ix_instruction_set_items_order");

                    b.ToTable("instruction_set_items", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Knowledge.KnowledgeEmbedding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("CharEnd")
                        .HasColumnType("integer")
                        .HasColumnName("char_end");

                    b.Property<int?>("CharStart")
                        .HasColumnType("integer")
                        .HasColumnName("char_start");

                    b.Property<int?>("ChunkIndex")
                        .HasColumnType("integer")
                        .HasColumnName("chunk_index");

                    b.Property<string>("ContentHash")
                        .HasColumnType("text")
                        .HasColumnName("content_hash");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<int?>("Dimensions")
                        .HasColumnType("integer")
                        .HasColumnName("dimensions");

                    b.Property<Guid>("KnowledgeItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("knowledge_item_id");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("ModelVersion")
                        .HasColumnType("text")
                        .HasColumnName("model_version");

                    b.Property<bool?>("Normalized")
                        .HasColumnType("boolean")
                        .HasColumnName("normalized");

                    b.Property<string>("Provider")
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<int?>("SchemaVersion")
                        .HasColumnType("integer")
                        .HasColumnName("schema_version");

                    b.Property<string>("ScopePath")
                        .HasColumnType("text")
                        .HasColumnName("scope_path");

                    b.Property<Guid?>("ScopePrincipalId")
                        .HasColumnType("uuid")
                        .HasColumnName("scope_principal_id");

                    b.Property<string>("ScopePrincipalType")
                        .HasColumnType("text")
                        .HasColumnName("scope_principal_type");

                    b.Property<Dictionary<string, string>>("ScopeSegments")
                        .HasColumnType("jsonb")
                        .HasColumnName("scope_segments");

                    b.Property<string>("Space")
                        .HasColumnType("text")
                        .HasColumnName("space");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.PrimitiveCollection<float[]>("Vector")
                        .IsRequired()
                        .HasColumnType("real[]")
                        .HasColumnName("vector");

                    b.Property<double?>("VectorL2Norm")
                        .HasColumnType("double precision")
                        .HasColumnName("vector_l2_norm");

                    b.HasKey("Id")
                        .HasName("pk_knowledge_embeddings");

                    b.HasIndex("Dimensions")
                        .HasDatabaseName("ix_knowledge_embeddings_dimensions");

                    b.HasIndex("KnowledgeItemId")
                        .HasDatabaseName("ix_knowledge_embeddings_item_id");

                    b.HasIndex("Model")
                        .HasDatabaseName("ix_knowledge_embeddings_model");

                    b.HasIndex("Provider")
                        .HasDatabaseName("ix_knowledge_embeddings_provider");

                    b.HasIndex("ScopePrincipalType", "ScopePrincipalId")
                        .HasDatabaseName("ix_knowledge_embeddings_scope_principal");

                    b.HasIndex("KnowledgeItemId", "Model", "ModelVersion", "ChunkIndex")
                        .IsUnique()
                        .HasDatabaseName("ux_knowledge_embeddings_item_model_version_chunk");

                    b.ToTable("knowledge_embeddings", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Knowledge.KnowledgeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Categories")
                        .HasColumnType("text[]")
                        .HasColumnName("categories");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.PrimitiveCollection<string[]>("Keywords")
                        .HasColumnType("text[]")
                        .HasColumnName("keywords");

                    b.Property<Dictionary<string, object>>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_knowledge_items");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_knowledge_items_timestamp");

                    b.ToTable("knowledge_items", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Knowledge.KnowledgeRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FromKnowledgeItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_item_id");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relationship_type");

                    b.Property<Guid>("ToKnowledgeItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_item_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_knowledge_relations");

                    b.HasIndex("ToKnowledgeItemId");

                    b.HasIndex("FromKnowledgeItemId", "ToKnowledgeItemId")
                        .HasDatabaseName("ix_knowledge_relations_pair");

                    b.ToTable("knowledge_relations", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.LLM.ApiCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<bool>("IsValid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_valid");

                    b.Property<string>("KeyRef")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("key_ref");

                    b.Property<DateTime?>("LastUsedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used_at_utc");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_api_credentials");

                    b.HasIndex("ProviderId", "KeyRef")
                        .IsUnique()
                        .HasDatabaseName("ux_api_credentials_provider_keyref");

                    b.ToTable("api_credentials", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.LLM.ClientProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApiCredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("api_credential_id");

                    b.Property<string>("BaseUrlOverride")
                        .HasColumnType("text")
                        .HasColumnName("base_url_override");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<double>("FrequencyPenalty")
                        .HasColumnType("double precision")
                        .HasColumnName("frequency_penalty");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LoggingEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("logging_enabled");

                    b.Property<int>("MaxTokens")
                        .HasColumnType("integer")
                        .HasColumnName("max_tokens");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<double>("PresencePenalty")
                        .HasColumnType("double precision")
                        .HasColumnName("presence_penalty");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<bool>("Stream")
                        .HasColumnType("boolean")
                        .HasColumnName("stream");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<double>("TopP")
                        .HasColumnType("double precision")
                        .HasColumnName("top_p");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_client_profiles");

                    b.HasIndex("ApiCredentialId");

                    b.HasIndex("ModelId");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_client_profiles_name");

                    b.HasIndex("ProviderId");

                    b.ToTable("client_profiles", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.LLM.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("CachedInputCostPer1M")
                        .HasColumnType("double precision")
                        .HasColumnName("cached_input_cost_per_1m");

                    b.Property<int?>("ContextWindow")
                        .HasColumnType("integer")
                        .HasColumnName("context_window");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<double?>("InputCostPer1M")
                        .HasColumnType("double precision")
                        .HasColumnName("input_cost_per_1m");

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deprecated");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<double?>("OutputCostPer1M")
                        .HasColumnType("double precision")
                        .HasColumnName("output_cost_per_1m");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<bool>("SupportsStreaming")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_streaming");

                    b.Property<bool>("SupportsVision")
                        .HasColumnType("boolean")
                        .HasColumnName("supports_vision");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("ProviderId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ux_models_provider_name");

                    b.ToTable("models", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.LLM.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text")
                        .HasColumnName("base_url");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_providers");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ux_providers_name");

                    b.ToTable("providers", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.Persona", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("background");

                    b.Property<string>("Beliefs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("beliefs");

                    b.Property<string>("CommunicationStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("communication_style");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.PrimitiveCollection<string[]>("DomainExpertise")
                        .HasColumnType("text[]")
                        .HasColumnName("domain_expertise");

                    b.Property<string>("EmotionalDrivers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emotional_drivers");

                    b.Property<string>("Essence")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("essence");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.PrimitiveCollection<Guid[]>("KnownPersonas")
                        .HasColumnType("uuid[]")
                        .HasColumnName("known_personas");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.PrimitiveCollection<string[]>("NarrativeThemes")
                        .HasColumnType("text[]")
                        .HasColumnName("narrative_themes");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("nickname");

                    b.Property<string>("OwnedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owned_by");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("role");

                    b.PrimitiveCollection<string[]>("SignatureTraits")
                        .HasColumnType("text[]")
                        .HasColumnName("signature_traits");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("persona_type");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("Voice")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("voice");

                    b.HasKey("Id")
                        .HasName("pk_personas");

                    b.ToTable("personas", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaDream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<bool>("Lucid")
                        .HasColumnType("boolean")
                        .HasColumnName("lucid");

                    b.Property<DateTime>("OccurredAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at_utc");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<Dictionary<string, object>>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.PrimitiveCollection<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<int>("Valence")
                        .HasColumnType("integer")
                        .HasColumnName("valence");

                    b.Property<int>("Vividness")
                        .HasColumnType("integer")
                        .HasColumnName("vividness");

                    b.HasKey("Id")
                        .HasName("pk_persona_dreams");

                    b.HasIndex("PersonaId", "OccurredAtUtc")
                        .HasDatabaseName("ix_persona_dreams_timeline");

                    b.ToTable("persona_dreams", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Categories")
                        .HasColumnType("text[]")
                        .HasColumnName("categories");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at_utc");

                    b.Property<double?>("Importance")
                        .HasColumnType("double precision")
                        .HasColumnName("importance");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<Dictionary<string, object>>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<DateTime>("StartedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at_utc");

                    b.PrimitiveCollection<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_persona_events");

                    b.HasIndex("TypeId");

                    b.HasIndex("PersonaId", "StartedAtUtc")
                        .HasDatabaseName("ix_persona_events_timeline");

                    b.ToTable("persona_events", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<Dictionary<string, object>>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_persona_event_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ux_persona_event_types_code");

                    b.ToTable("persona_event_types", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FromPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_persona_id");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("text")
                        .HasColumnName("relationship_type");

                    b.Property<Guid>("ToPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_persona_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_persona_links");

                    b.HasIndex("ToPersonaId");

                    b.HasIndex("FromPersonaId", "ToPersonaId")
                        .HasDatabaseName("ix_persona_links_pair");

                    b.ToTable("persona_links", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaMemory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.PrimitiveCollection<string[]>("Emotions")
                        .HasColumnType("text[]")
                        .HasColumnName("emotions");

                    b.Property<DateTime?>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at_utc");

                    b.Property<double?>("Importance")
                        .HasColumnType("double precision")
                        .HasColumnName("importance");

                    b.Property<DateTime?>("OccurredAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at_utc");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<Dictionary<string, object>>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<DateTime>("RecordedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recorded_at_utc");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.PrimitiveCollection<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_persona_memories");

                    b.HasIndex("TypeId");

                    b.HasIndex("PersonaId", "OccurredAtUtc")
                        .HasDatabaseName("ix_persona_memories_timeline");

                    b.ToTable("persona_memories", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaMemoryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<Dictionary<string, object>>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_persona_memory_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ux_persona_memory_types_code");

                    b.ToTable("persona_memory_types", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaPersonas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_persona_id");

                    b.Property<bool>("IsOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_owner");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<Guid>("ToPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_persona_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_persona_personas");

                    b.HasIndex("ToPersonaId");

                    b.HasIndex("FromPersonaId", "ToPersonaId")
                        .IsUnique()
                        .HasDatabaseName("ux_persona_personas_pair");

                    b.ToTable("persona_personas", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Planning.PlannerExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("agent_id");

                    b.Property<Dictionary<string, object>>("Artifacts")
                        .HasColumnType("jsonb")
                        .HasColumnName("artifacts");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<Dictionary<string, object>>("ConversationState")
                        .HasColumnType("jsonb")
                        .HasColumnName("conversation_state");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Dictionary<string, string>>("Diagnostics")
                        .HasColumnType("jsonb")
                        .HasColumnName("diagnostics");

                    b.Property<string>("Environment")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("environment");

                    b.Property<Dictionary<string, double>>("Metrics")
                        .HasColumnType("jsonb")
                        .HasColumnName("metrics");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("outcome");

                    b.Property<string>("PlannerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("planner_name");

                    b.Property<Guid?>("PrimaryAgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("primary_agent_id");

                    b.Property<string>("ScopePath")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("scope_path");

                    b.Property<Guid?>("ToolId")
                        .HasColumnType("uuid")
                        .HasColumnName("tool_id");

                    b.Property<List<PlannerExecutionTranscriptEntry>>("Transcript")
                        .HasColumnType("jsonb")
                        .HasColumnName("transcript");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_planner_executions");

                    b.ToTable("planner_executions", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Prompts.PromptTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Example")
                        .HasColumnType("text")
                        .HasColumnName("example");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("PromptType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prompt_type");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.Property<Dictionary<string, object>>("Tokens")
                        .HasColumnType("jsonb")
                        .HasColumnName("tokens");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_prompt_templates");

                    b.ToTable("prompt_templates", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Questions.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty");

                    b.PrimitiveCollection<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_questions_category");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Questions.QuestionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_question_categories");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ux_question_categories_key");

                    b.ToTable("question_categories", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.Tool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClassPath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("class_path");

                    b.Property<Guid?>("ClientProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_profile_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Example")
                        .HasColumnType("text")
                        .HasColumnName("example");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.PrimitiveCollection<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_tools");

                    b.HasIndex("ClientProfileId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ux_tools_name");

                    b.ToTable("tools", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.ToolExecutionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AgentId")
                        .HasColumnType("uuid")
                        .HasColumnName("agent_id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("DurationMs")
                        .HasColumnType("integer")
                        .HasColumnName("duration_ms");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<Dictionary<string, object>>("Request")
                        .HasColumnType("jsonb")
                        .HasColumnName("request");

                    b.Property<Dictionary<string, object>>("Response")
                        .HasColumnType("jsonb")
                        .HasColumnName("response");

                    b.Property<DateTime>("StartedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at_utc");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<Guid>("ToolId")
                        .HasColumnType("uuid")
                        .HasColumnName("tool_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_tool_execution_logs");

                    b.HasIndex("AgentId");

                    b.HasIndex("ToolId", "StartedAtUtc")
                        .HasDatabaseName("ix_tool_execution_logs_tool_time");

                    b.ToTable("tool_execution_logs", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.ToolParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Dictionary<string, object>>("DefaultValue")
                        .HasColumnType("jsonb")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<Dictionary<string, object>>("Options")
                        .HasColumnType("jsonb")
                        .HasColumnName("options");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<Guid>("ToolId")
                        .HasColumnType("uuid")
                        .HasColumnName("tool_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_tool_parameters");

                    b.HasIndex("ToolId", "Name", "Direction")
                        .IsUnique()
                        .HasDatabaseName("ux_tool_parameters_tool_name_dir");

                    b.ToTable("tool_parameters", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.ToolProviderSupport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<string>("SupportLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("support_level");

                    b.Property<Guid>("ToolId")
                        .HasColumnType("uuid")
                        .HasColumnName("tool_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_tool_provider_supports");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ToolId", "ProviderId", "ModelId")
                        .IsUnique()
                        .HasDatabaseName("ux_tool_provider_support_key");

                    b.ToTable("tool_provider_supports", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Users.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at_utc");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at_utc");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId", "Token")
                        .IsUnique()
                        .HasDatabaseName("ux_refresh_tokens_user_token");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordAlgo")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password_algo");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<int>("PasswordHashVersion")
                        .HasColumnType("integer")
                        .HasColumnName("password_hash_version");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<DateTime?>("PasswordUpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_updated_at_utc");

                    b.Property<Guid?>("PrimaryPersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("primary_persona_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("security_stamp");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("ux_users_normalized_email");

                    b.HasIndex("NormalizedUsername")
                        .IsUnique()
                        .HasDatabaseName("ux_users_normalized_username");

                    b.HasIndex("PrimaryPersonaId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Users.UserPersonas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_owner");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_personas");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("IX_user_personas_persona_id");

                    b.HasIndex("UserId", "PersonaId")
                        .IsUnique()
                        .HasDatabaseName("ux_user_personas_user_persona");

                    b.ToTable("user_personas", (string)null);
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Agents.Agent", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.LLM.ClientProfile", "ClientProfile")
                        .WithMany()
                        .HasForeignKey("ClientProfileId")
                        .HasConstraintName("fk_agents_client_profiles");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agents_personas");

                    b.Navigation("ClientProfile");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Agents.AgentToolBinding", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Agents.Agent", null)
                        .WithMany("ToolBindings")
                        .HasForeignKey("AgentId");

                    b.HasOne("Cognition.Data.Relational.Modules.Tools.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agent_tool_bindings_tools");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.Conversation", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Agents.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversations_agents");

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationMessage", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_messages_conversations");

                    b.HasOne("Cognition.Data.Relational.Modules.Agents.Agent", "FromAgent")
                        .WithMany()
                        .HasForeignKey("FromAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_messages_from_agent");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "FromPersona")
                        .WithMany()
                        .HasForeignKey("FromPersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_messages_from_persona");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "ToPersona")
                        .WithMany()
                        .HasForeignKey("ToPersonaId")
                        .HasConstraintName("fk_conversation_messages_to_persona");

                    b.Navigation("Conversation");

                    b.Navigation("FromAgent");

                    b.Navigation("FromPersona");

                    b.Navigation("ToPersona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationMessageVersion", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.ConversationMessage", "ConversationMessage")
                        .WithMany()
                        .HasForeignKey("ConversationMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_message_versions_message");

                    b.Navigation("ConversationMessage");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationParticipant", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.Conversation", "Conversation")
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_participants_conversations");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_participants_personas");

                    b.Navigation("Conversation");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationPlan", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_plans_conversations");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_plans_persona");

                    b.Navigation("Conversation");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationSummary", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "ByPersona")
                        .WithMany()
                        .HasForeignKey("ByPersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_summaries_by_persona");

                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.Conversation", "Conversation")
                        .WithMany("Summaries")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_summaries_conversations");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "ReferencesPersona")
                        .WithMany()
                        .HasForeignKey("ReferencesPersonaId")
                        .HasConstraintName("fk_conversation_summaries_ref_persona");

                    b.Navigation("ByPersona");

                    b.Navigation("Conversation");

                    b.Navigation("ReferencesPersona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationTask", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.ConversationPlan", "ConversationPlan")
                        .WithMany("Tasks")
                        .HasForeignKey("ConversationPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_tasks_plan");

                    b.Navigation("ConversationPlan");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationThought", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_thoughts_conversations");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_conversation_thoughts_persona");

                    b.Navigation("Conversation");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationWorkflowState", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterBlueprint", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionPlan", "FictionPlan")
                        .WithMany("ChapterBlueprints")
                        .HasForeignKey("FictionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_chapter_blueprints_plan");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionPlanPass", "SourcePlanPass")
                        .WithMany()
                        .HasForeignKey("SourcePlanPassId")
                        .HasConstraintName("fk_fiction_chapter_blueprints_pass");

                    b.Navigation("FictionPlan");

                    b.Navigation("SourcePlanPass");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterScene", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterScene", "DerivedFromScene")
                        .WithMany()
                        .HasForeignKey("DerivedFromSceneId")
                        .HasConstraintName("fk_fiction_chapter_scenes_parent");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterSection", "FictionChapterSection")
                        .WithMany("Scenes")
                        .HasForeignKey("FictionChapterSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_chapter_scenes_section");

                    b.Navigation("DerivedFromScene");

                    b.Navigation("FictionChapterSection");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterScroll", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterScroll", "DerivedFromScroll")
                        .WithMany()
                        .HasForeignKey("DerivedFromScrollId")
                        .HasConstraintName("fk_fiction_chapter_scrolls_parent");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterBlueprint", "FictionChapterBlueprint")
                        .WithMany("Scrolls")
                        .HasForeignKey("FictionChapterBlueprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_chapter_scrolls_blueprint");

                    b.Navigation("DerivedFromScroll");

                    b.Navigation("FictionChapterBlueprint");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterSection", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterScroll", "FictionChapterScroll")
                        .WithMany("Sections")
                        .HasForeignKey("FictionChapterScrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_chapter_sections_scroll");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterSection", "ParentSection")
                        .WithMany("ChildSections")
                        .HasForeignKey("ParentSectionId")
                        .HasConstraintName("fk_fiction_chapter_sections_parent");

                    b.Navigation("FictionChapterScroll");

                    b.Navigation("ParentSection");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlan", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionProject", "FictionProject")
                        .WithMany("FictionPlans")
                        .HasForeignKey("FictionProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_plans_project");

                    b.Navigation("FictionProject");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlanBacklogItem", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionPlan", "FictionPlan")
                        .WithMany("Backlog")
                        .HasForeignKey("FictionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_plan_backlog_plan");

                    b.Navigation("FictionPlan");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlanCheckpoint", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionPlan", "FictionPlan")
                        .WithMany("Checkpoints")
                        .HasForeignKey("FictionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_plan_checkpoints_plan");

                    b.Navigation("FictionPlan");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlanPass", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionPlan", "FictionPlan")
                        .WithMany("Passes")
                        .HasForeignKey("FictionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_plan_passes_plan");

                    b.Navigation("FictionPlan");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlanTranscript", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterBlueprint", "FictionChapterBlueprint")
                        .WithMany()
                        .HasForeignKey("FictionChapterBlueprintId")
                        .HasConstraintName("fk_fiction_plan_transcripts_blueprint");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterScene", "FictionChapterScene")
                        .WithMany("Transcripts")
                        .HasForeignKey("FictionChapterSceneId")
                        .HasConstraintName("fk_fiction_plan_transcripts_scene");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionPlan", "FictionPlan")
                        .WithMany("Transcripts")
                        .HasForeignKey("FictionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_plan_transcripts_plan");

                    b.Navigation("FictionChapterBlueprint");

                    b.Navigation("FictionChapterScene");

                    b.Navigation("FictionPlan");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionStoryMetric", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterScene", "FictionChapterScene")
                        .WithMany("StoryMetrics")
                        .HasForeignKey("FictionChapterSceneId")
                        .HasConstraintName("fk_fiction_story_metrics_scene");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionPlan", "FictionPlan")
                        .WithMany("StoryMetrics")
                        .HasForeignKey("FictionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_story_metrics_plan");

                    b.Navigation("FictionChapterScene");

                    b.Navigation("FictionPlan");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionWorldBible", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionPlan", "FictionPlan")
                        .WithMany("WorldBibles")
                        .HasForeignKey("FictionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_world_bibles_plan");

                    b.Navigation("FictionPlan");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionWorldBibleEntry", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionWorldBibleEntry", "DerivedFromEntry")
                        .WithMany()
                        .HasForeignKey("DerivedFromEntryId")
                        .HasConstraintName("fk_fiction_world_bible_entries_parent");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterScene", "FictionChapterScene")
                        .WithMany("WorldBibleEntries")
                        .HasForeignKey("FictionChapterSceneId")
                        .HasConstraintName("fk_fiction_world_bible_entries_scene");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionChapterScroll", "FictionChapterScroll")
                        .WithMany("WorldBibleEntries")
                        .HasForeignKey("FictionChapterScrollId")
                        .HasConstraintName("fk_fiction_world_bible_entries_scroll");

                    b.HasOne("Cognition.Data.Relational.Modules.Fiction.FictionWorldBible", "FictionWorldBible")
                        .WithMany("Entries")
                        .HasForeignKey("FictionWorldBibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fiction_world_bible_entries_bible");

                    b.Navigation("DerivedFromEntry");

                    b.Navigation("FictionChapterScene");

                    b.Navigation("FictionChapterScroll");

                    b.Navigation("FictionWorldBible");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Images.ImageAsset", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Conversations.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("fk_image_assets_conversations");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "CreatedByPersona")
                        .WithMany()
                        .HasForeignKey("CreatedByPersonaId")
                        .HasConstraintName("fk_image_assets_personas");

                    b.HasOne("Cognition.Data.Relational.Modules.Images.ImageStyle", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId")
                        .HasConstraintName("fk_image_assets_styles");

                    b.Navigation("Conversation");

                    b.Navigation("CreatedByPersona");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Instructions.InstructionSetItem", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Instructions.Instruction", "Instruction")
                        .WithMany("InstructionSetItems")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instruction_set_items_instructions");

                    b.HasOne("Cognition.Data.Relational.Modules.Instructions.InstructionSet", "InstructionSet")
                        .WithMany("Items")
                        .HasForeignKey("InstructionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instruction_set_items_sets");

                    b.Navigation("Instruction");

                    b.Navigation("InstructionSet");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Knowledge.KnowledgeEmbedding", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Knowledge.KnowledgeItem", "KnowledgeItem")
                        .WithMany("Embeddings")
                        .HasForeignKey("KnowledgeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_knowledge_embeddings_item");

                    b.Navigation("KnowledgeItem");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Knowledge.KnowledgeRelation", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Knowledge.KnowledgeItem", "FromKnowledgeItem")
                        .WithMany()
                        .HasForeignKey("FromKnowledgeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_knowledge_relations_from");

                    b.HasOne("Cognition.Data.Relational.Modules.Knowledge.KnowledgeItem", "ToKnowledgeItem")
                        .WithMany()
                        .HasForeignKey("ToKnowledgeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_knowledge_relations_to");

                    b.Navigation("FromKnowledgeItem");

                    b.Navigation("ToKnowledgeItem");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.LLM.ApiCredential", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.LLM.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_credentials_providers");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.LLM.ClientProfile", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.LLM.ApiCredential", "ApiCredential")
                        .WithMany()
                        .HasForeignKey("ApiCredentialId")
                        .HasConstraintName("fk_client_profiles_api_credentials");

                    b.HasOne("Cognition.Data.Relational.Modules.LLM.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .HasConstraintName("fk_client_profiles_models");

                    b.HasOne("Cognition.Data.Relational.Modules.LLM.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_profiles_providers");

                    b.Navigation("ApiCredential");

                    b.Navigation("Model");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.LLM.Model", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.LLM.Provider", "Provider")
                        .WithMany("Models")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_models_providers");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaDream", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persona_dreams_persona");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaEvent", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persona_events_persona");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.PersonaEventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_persona_events_type");

                    b.Navigation("Persona");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaLink", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "FromPersona")
                        .WithMany("OutboundLinks")
                        .HasForeignKey("FromPersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persona_links_from");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "ToPersona")
                        .WithMany("InboundLinks")
                        .HasForeignKey("ToPersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persona_links_to");

                    b.Navigation("FromPersona");

                    b.Navigation("ToPersona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaMemory", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persona_memories_persona");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.PersonaMemoryType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_persona_memories_type");

                    b.Navigation("Persona");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.PersonaPersonas", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "FromPersona")
                        .WithMany()
                        .HasForeignKey("FromPersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persona_personas_from");

                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "ToPersona")
                        .WithMany()
                        .HasForeignKey("ToPersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_persona_personas_to");

                    b.Navigation("FromPersona");

                    b.Navigation("ToPersona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Questions.Question", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Questions.QuestionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.Tool", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.LLM.ClientProfile", "ClientProfile")
                        .WithMany()
                        .HasForeignKey("ClientProfileId")
                        .HasConstraintName("fk_tools_client_profiles");

                    b.Navigation("ClientProfile");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.ToolExecutionLog", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Agents.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("Cognition.Data.Relational.Modules.Tools.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tool_execution_logs_tools");

                    b.Navigation("Agent");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.ToolParameter", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Tools.Tool", "Tool")
                        .WithMany("Parameters")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tool_parameters_tools");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.ToolProviderSupport", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.LLM.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .HasConstraintName("fk_tool_provider_supports_models");

                    b.HasOne("Cognition.Data.Relational.Modules.LLM.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tool_provider_supports_providers");

                    b.HasOne("Cognition.Data.Relational.Modules.Tools.Tool", "Tool")
                        .WithMany()
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tool_provider_supports_tools");

                    b.Navigation("Model");

                    b.Navigation("Provider");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Users.RefreshToken", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Users.User", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "PrimaryPersona")
                        .WithMany()
                        .HasForeignKey("PrimaryPersonaId")
                        .HasConstraintName("fk_users_primary_persona");

                    b.Navigation("PrimaryPersona");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Users.UserPersonas", b =>
                {
                    b.HasOne("Cognition.Data.Relational.Modules.Personas.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_personas_personas");

                    b.HasOne("Cognition.Data.Relational.Modules.Users.User", "User")
                        .WithMany("UserPersonas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_personas_users");

                    b.Navigation("Persona");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Agents.Agent", b =>
                {
                    b.Navigation("ToolBindings");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.Conversation", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");

                    b.Navigation("Summaries");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Conversations.ConversationPlan", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterBlueprint", b =>
                {
                    b.Navigation("Scrolls");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterScene", b =>
                {
                    b.Navigation("StoryMetrics");

                    b.Navigation("Transcripts");

                    b.Navigation("WorldBibleEntries");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterScroll", b =>
                {
                    b.Navigation("Sections");

                    b.Navigation("WorldBibleEntries");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionChapterSection", b =>
                {
                    b.Navigation("ChildSections");

                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionPlan", b =>
                {
                    b.Navigation("Backlog");

                    b.Navigation("ChapterBlueprints");

                    b.Navigation("Checkpoints");

                    b.Navigation("Passes");

                    b.Navigation("StoryMetrics");

                    b.Navigation("Transcripts");

                    b.Navigation("WorldBibles");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionProject", b =>
                {
                    b.Navigation("FictionPlans");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Fiction.FictionWorldBible", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Instructions.Instruction", b =>
                {
                    b.Navigation("InstructionSetItems");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Instructions.InstructionSet", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Knowledge.KnowledgeItem", b =>
                {
                    b.Navigation("Embeddings");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.LLM.Provider", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Personas.Persona", b =>
                {
                    b.Navigation("InboundLinks");

                    b.Navigation("OutboundLinks");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Tools.Tool", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("Cognition.Data.Relational.Modules.Users.User", b =>
                {
                    b.Navigation("UserPersonas");
                });
#pragma warning restore 612, 618
        }
    }
}
